‚úÖ Rust Requirements
Install the crate:

toml
Copy
Edit
# Cargo.toml
[dependencies]
nng = "1.0"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
uuid = { version = "1.4", features = ["v4"] }
üîÅ Architecture Recap
A broker process routes messages (via SUB and PUB).

Each worker has:

A PUB socket (sends to broker)

A SUB socket (receives from broker)

Filters out its own messages (by unique ID)

üß† Message Struct
rust
Copy
Edit
use serde::{Serialize, Deserialize};
use std::collections::HashMap;

#[derive(Serialize, Deserialize, Debug)]
struct ParamUpdate {
    id: String,
    params: HashMap<String, i32>,
}
üöÄ 1. Broker in Rust
rust
Copy
Edit
// broker.rs
use nng::{Protocol, Socket};
use std::io;

fn main() -> Result<(), io::Error> {
    let sub = Socket::new(Protocol::Sub0).unwrap();
    let pub_sock = Socket::new(Protocol::Pub0).unwrap();

    sub.listen("tcp://127.0.0.1:5556").unwrap(); // receive from workers
    pub_sock.listen("tcp://127.0.0.1:5555").unwrap(); // send to workers

    sub.set_opt::<nng::options::protocol::sub::Subscribe>(b"").unwrap();

    loop {
        let msg = sub.recv().unwrap();
        pub_sock.send(msg).unwrap(); // forward the message
    }
}
üë∑ 2. Worker in Rust
rust
Copy
Edit
// worker.rs
use nng::{Protocol, Socket};
use serde_json;
use uuid::Uuid;
use std::{thread, time::Duration, collections::HashMap};
use std::sync::{Arc, Mutex};

mod shared;
use shared::ParamUpdate;

fn main() {
    let id = Uuid::new_v4().to_string();
    let parameters = Arc::new(Mutex::new(HashMap::new()));

    // Subscriber thread
    let params_clone = Arc::clone(&parameters);
    let id_clone = id.clone();
    thread::spawn(move || {
        let sub = Socket::new(Protocol::Sub0).unwrap();
        sub.dial("tcp://127.0.0.1:5555").unwrap();
        sub.set_opt::<nng::options::protocol::sub::Subscribe>(b"").unwrap();

        loop {
            let msg = sub.recv().unwrap();
            let parsed: ParamUpdate = serde_json::from_slice(&msg).unwrap();

            if parsed.id != id_clone {
                let mut params = params_clone.lock().unwrap();
                params.extend(parsed.params.clone());
                println!("[{}] Received: {:?}", id_clone, parsed.params);
            }
        }
    });

    // Publisher (main thread)
    let pub_sock = Socket::new(Protocol::Pub0).unwrap();
    pub_sock.dial("tcp://127.0.0.1:5556").unwrap();

    loop {
        thread::sleep(Duration::from_secs(3));
        let mut update = HashMap::new();
        let key = format!("param_{}", rand::random::<u8>() % 3);
        update.insert(key, rand::random::<i32>() % 100);

        let message = ParamUpdate {
            id: id.clone(),
            params: update.clone(),
        };

        let json = serde_json::to_vec(&message).unwrap();
        pub_sock.send(json).unwrap();
        println!("[{}] Published: {:?}", id, update);
    }
}
üß© shared.rs (used by both)
rust
Copy
Edit
use serde::{Serialize, Deserialize};
use std::collections::HashMap;

#[derive(Serialize, Deserialize, Debug)]
pub struct ParamUpdate {
    pub id: String,
    pub params: HashMap<String, i32>,
}
